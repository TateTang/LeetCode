package One_question_per_day;

/**
 * @Author tangmf
 * @Date 2021/4/21 10:08 上午
 * @Description 91. 解码方法 一条包含字母 A-Z 的消息通过以下映射进行了 编码
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 * "AAJF" ，将消息分组为 (1 1 10 6)
 * "KJF" ，将消息分组为 (11 10 6)
 * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * 示例 1：
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 * 示例 2：
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 * 示例 3：
 * 输入：s = "0"
 * 输出：0
 * 解释：没有字符映射到以 0 开头的数字。
 * 含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
 * 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
 * 示例 4：
 * 输入：s = "06"
 * 输出：0
 * 解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）
 */
public class T0421 {
    public static void main(String[] args) {
        String s = "12";
        System.out.println(numDecodings(s));
    }

    public static int numDecodings(String s) {
        /*
            基本思路：
            1、解码内容：item
            2、每一个item可以1个或者2个数字组成
            3、数据范围100，具有迷惑性，可能存在DFS进行暴力搜索，
            4、判断是否可行：不失一般性的考虑字符串s中的任意位置i，位置i既可以作为一个独立item，
            也可以与上一位置组成新item，那么相当于每个位置有两种分割方法。时间复杂度O(2^n)
            5、递归方法不可行，考虑地推的解法
            典型的动态规划解法：
            1、不难发现对于字符串 s 的某个位置i而言，只关心[位置i自己能否形成独立的item]以及[位置i能否与上一位置
            （i-1）能否形成item]，不需要关心i-1之前的位置
            2、从前往后处理字符串s，使用一个数组记录以字符串s的每一位作为结尾的解码方案数，定义
            dp[i]为考虑前i个字符的解码方案数
            3、对于字符串s的任意位置i而言，其存在三种情况：
              - 1. 只能由位置i的单独作为一个item，设置为a，转移a的前提是a的数值的范围是在[1，9]，
              转移逻辑dp[i]=dp[i-1]
              - 2. 只能由位置i的与前一个位置(i-1)共同作为一个item，设为b，转移b的数值范围是在[10,26]，
              转移逻辑dp[i]=dp[i-2]
              - 3. 位置i既能作为独立item也能与上一位置形成item，转移逻辑
              dp[i]=dp[i-1]+dp[i-2]
            4、状态方程如下
              dp[i]=dp[i-1] 1<=a<=9
              dp[i]=dp[i-2] 10<=b<=26
              dp[i]=dp[i-1]+dp[i-2] 1<=a<=9,10<=b<=26
            5、由于题目存在前导0，而前导0属于无效的item。
            6、进行特判，往字符串头部追加空格作为哨兵，追加空格既可以避免讨论前导零，也能够使下标从1开始，简化
            d[i-1]等负数下标的判断
         */
        int len = s.length();
        s = " " + s;
        char[] cs = s.toCharArray();
        int[] dp = new int[len + 1];
        dp[0] = 1;
        for (int i = 1; i <= len; i++) {
            //a：表示当前位置单独形成item
            int a = cs[i] - '0';
            //b: 表示当前位置与前一个位置形成item
            int b = (cs[i - 1] - '0') * 10 + (cs[i] - '0');
            //如果a有效值，那么dp[i]=dp[i-1]，单独的item
            if (1 <= a && a <= 9) dp[i] = dp[i - 1];
            //b是有效值，那么 dp[i] 可以由 dp[i - 2] 或者 dp[i - 1] & dp[i - 2] 转移过来
            if (10 <= b && b <= 26) dp[i] += dp[i - 2];
        }
        return dp[len];
    }
}
